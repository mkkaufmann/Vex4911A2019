#include "main.h"
#include "subsystems/drive.hpp"
#include "subsystems/subsystemmanager.hpp"
#include "motionprofiles/pathfollower.hpp"
#include "util/point.hpp"
#include "util/autontimer.hpp"
#include "util/action.hpp"
#include "util/actions.hpp"
#include "util/asyncaction.hpp"
#include "util/actiontrigger.hpp"
#include "util/asyncactionfactory.hpp"
#include "subsystems/stacker.hpp"
#include "util/triggers.hpp"

/**
 * Runs the user autonomous code. This function will be started in its own task
 * with the default priority and stack size whenever the robot is enabled via
 * the Field Management System or the VEX Competition Switch in the autonomous
 * mode. Alternatively, this function may be called in initialize or opcontrol
 * for non-competition testing purposes.
 *
 * If the robot is disabled or communications is lost, the autonomous task
 * will be stopped. Re-enabling the robot will restart the task, not re-start it
 * from where it left off.
 */
void autonomous() {

  Drive drive = *Drive::getInstance();
  PositionTracker tracker = *PositionTracker::getInstance();
  Stacker stacker = *Stacker::getInstance();
  
  pros::Motor stacker1Motor = pros::Motor(Constants::STACKER_TREAD_1_MOTOR_PORT);
  pros::Motor stacker2Motor = pros::Motor(Constants::STACKER_TREAD_2_MOTOR_PORT);


  drive.driveManually(0, 127, 0, true);
  drive.in();
  drive.out();
  stacker.outtake();
  stacker.in();
  stacker1Motor.move(stacker.getOutput());
  stacker2Motor.move(-stacker.getOutput());
  pros::delay(1000)
  drive.driveManually(0,0,0,true);
  drive.in();
  drive.out();
}
